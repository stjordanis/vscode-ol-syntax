<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string></string>
	<key>fileTypes</key>
	<array>
		<string>lisp</string>
		<string>scm</string>
		<string>ol</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\(</string>
	<key>foldingStopMarker</key>
	<string>\)</string>
	<key>keyEquivalent</key>
	<string>^~L</string>
	<key>name</key>
	<string>Ol</string>
	<key>patterns</key>
	<array>
        <!-- comments (+)-->
		<dict>
			<key>match</key>
			<string>(;).*$\n?</string>
			<key>name</key>
			<string>comment.line.semicolon.scheme.ol</string>

			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.scheme.ol</string>
				</dict>
			</dict>
		</dict>
		<dict>
            <!--
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.lisp</string>
				</dict>
			</dict> -->
			<key>begin</key>
			<string>#\|</string>
			<key>end</key>
			<string>\|#</string>
			<key>name</key>
			<string>comment.block.scheme.ol</string>
		</dict>

        <!-- keywords (+) -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(quote|values|lambda|setq|letq|ifeq|either|values-apply|define-syntax|syntax-rules)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.scheme.ol</string>
				</dict>
			</dict>
		</dict>

        <!-- constants (+) -->
		<dict>
			<key>match</key>
			<string>(?:^|[) ])(#(false|f|F|true|t|T|null|empty|e|eof))(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.scheme.ol</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>(?:^|[) ])(#\\(.|null|alarm|backspace|tab|newline|return|escape|space|delete))(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.character.scheme.ol</string>
				</dict>
			</dict>
		</dict>
		<dict> <!-- numbers. todo: add complex and rational numbers -->
			<key>match</key>
			<string>(?:^|[) ])(([0-9]+)|(#((b[01]+)|(o[0-7]+)|(d[0-9]+)|(x[0-9a-fA-F]+))))(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.scheme.ol</string>
				</dict>
			</dict>
		</dict>
		<dict> <!-- strings -->
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\[abtnre"|\\])</string>
					<key>name</key>
					<string>constant.character.escape.scheme.ol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\[^abtnre"|\\])</string>
					<key>name</key>
					<string>invalid.illegal.escape.scheme.ol</string>
				</dict>
			</array>
		</dict>

        <!-- r5rs -->
		<!-- special case: function defines -->
		<dict>
			<key>match</key>
			<string>(?:\()(define)\s+\(([^\[\]`#(){}\|;'",. ]+)(?= |$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.scheme.ol</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.scheme.ol</string>
				</dict>
			</dict>
        </dict>

        <!-- vm primitives -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(cons|car|cdr|ref|type|size|set|set!|eq\?|less\?|clock|syscall|tuple-apply|ff-apply)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.scheme.ol</string>
				</dict>
			</dict>
		</dict>

        <!-- common r5rs functions -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(Î»|syntax-error|assert|runtime-error|error|if|unless|cond|case|and|or|letrec|let|let\*|begin|delay|force|quasiquote|define|list|length|append|reverse|ilist|tuple|tuple-case|call-with-values|define-library|define-values|integer\?|rational\?|complex\?|real\?|number\?|exact\?|inexact\?|apply|call-with-current-continuation|call/cc|lets/cc|not|boolean\?|pair\?|symbol\?|vector\?|port\?|procedure\?|null\?|eof\?|value\?|reference\?|zero\?|list-ref|bytecode\?|function\?|ff\?|map|list\?|exec|yield|halt|wait|set-car!|set-cdr!|else)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol</string>
				</dict>
			</dict>
		</dict>

        <!-- libraries -->
        <!-- (owl strings) /incomplete -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(runes->string|bytes->string|string->bytes|string->runes|list->string|string->list|string-length|string-eq\?|string-append|c-string|null-terminate|finish-string|render-string|render-quoted-string)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.strings</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl io) -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(fopen|fclose|sleep|open-output-file|open-input-file|port\?|flush-port|close-port|wait-write|blocks->port|closing-blocks->port|file->vector|file->list|vector->file|write-vector|port->byte-stream|stdin|stdout"stderr"display-to|print-to|display|print|print\*|print\*-to|write|writer-to|write-to|write-bytes|write-byte-vector|get-block|try-get-block|lines|system-print|fasl-save|fasl-load)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.io</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl list) -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(null|caar|cadr|cdar|cddr|caaar|caadr|cadar|caddr|cdaar|cdadr|cddar|cdddr|zip|for|fold|foldr|for-each|has\?|getq|last|drop-while|mem|fold-map|foldr-map|append|reverse|keep|remove|all|some|smap|unfold|take-while|fold2|first|halve|caaaar|caaadr|caadar|caaddr|cadaar|cadadr|caddar|cadddr|cdaaar|cdaadr|cdadar|cdaddr|cddaar|cddadr|cdddar|cddddr)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.list</string>
				</dict>
			</dict>
        </dict>
        <!-- (owl interop) -->
		<dict>
			<key>match</key>
			<string>(?:^|[() ])(interact|fork|accept-mail|wait-mail|check-mail|release-thread|catch-thread|set-signal-action|single-thread\?|kill|mail|fork-linked-server|fork-server|return-mails|fork-server|fork-linked|fork-named|exit-thread|shutdown|poll-mail-from|running-threads|par\*|start-nested-parallel-computation|wrap-the-whole-world-to-a-thunk|par|por\*|por|interop)(?=[() ]|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ol.owl.interop</string>
				</dict>
			</dict>
        </dict>

		<!-- <dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function-type.lisp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.lisp</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\()((?i:deftype|defstruct|define-condition|defpackage|defclass))\s+((?:\w|[+\-<>/*&amp;=.?!$%:@\[\]^{}~#|])+)</string>
		</dict> -->

		<!-- <dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function-type.lisp</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.variable.lisp</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\()((?i:defvar|defconstant|defparameter|define-symbol-macro))\s+((?:\w|[+\-<>/*&amp;=.?!$%:@\[\]^{}~#|])+)</string>
		</dict> -->

		<!-- <dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.lisp</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.variable.lisp</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?<=^|\s|[()])(\*)(\S*)(\*)(?=$|\s|[()])</string>
			<key>name</key>
			<string>variable.other.global.lisp</string>
		</dict>

		<dict>
			<key>match</key>
			<string>(?<=^|\s|[()]):(\w|[+\-<>/*&amp;=.?!$%:@\[\]^{}~#|])*</string>
			<key>name</key>
			<string>keyword.constant.lisp</string>
		</dict> -->

	</array>
	<key>scopeName</key>
	<string>source.lisp</string>
	<key>uuid</key>
	<string>3a6530da-7929-11e8-adc0-fa7ae01bbebc</string>
</dict>
</plist>
